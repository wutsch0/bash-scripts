#!/bin/bash
# necessary packages:   libimage-exiftool-perl

#
# DEFINE DEFAULT VALUES
#
COUNTER=0
DRYRUN="false"
EXIFUPDATE="false"
PATTERN="%Y-%m-%d %H.%M.%S"
PREVIOUS_DATETIME=""


#
# READ SCRIPT ARGUMENTS
#
ADDITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case "$key" in
        -e|--exifupdate)
            EXIFUPDATE="true"
            shift # past argument
        ;;
        -d|--dryrun)
            DRYRUN="true"
            shift # past argument
        ;;
        -p|--pattern)
            PATTERN="$2"
            shift # past argument
            shift # past value
        ;;
        *)  # unknown option
            ADDITIONAL+=("$1") # save it in an array for later
            shift # past argument
        ;;
    esac
done


#
# VALIDATE ARGUMENTS
#
if [ ${#ADDITIONAL[@]} -gt 0 ];
then
    if [ ${#ADDITIONAL[@]} -gt 1 ];
    then
        echo "To many parameters. Exiting"
        exit 3
    else
        IMAGE_PATH="${ADDITIONAL[0]}"
    fi
else
    echo "To few parameters. Exiting"
    exit 4
fi

if [ ! -d "$IMAGE_PATH" ]; then
  echo "Path '$IMAGE_PATH' does not exist. Existing"
  exit 5
fi


if [ "$DRYRUN" == "true" ]; then
    echo ""
    echo "NOTE: This is a DRYRUN only"
    echo "---------------------------"
    echo ""
fi


#
# LOOP THROUGH FILES IN PATH
#
cd ${IMAGE_PATH}
# loop through all files, use \n as separator to support whitespaces in filename; order alphabetically while interpret numbers
find . -type f -printf "%f\n" | sort -V  | while read i
do

    # get datetime from exif data
    DATETIME="$(exiftool -t -s -d "${PATTERN}" -CreateDate "$i" | sed -r 's/^\s*CreateDate\s*//g' )"

    # if not available, get last modification time from file
    if [ -z "$DATETIME" ]; then
        DATETIME="$(date -r "$i" "+${PATTERN}")"

        if [ "$EXIFUPDATE" == "true" ]; then
            EXIF_DATETIME="$(date -r "$i" "+%Y-%m-%d %H:%M:%S")"
            echo "${i}: update exif timestamp to ${EXIF_DATETIME}"
            if [ "$DRYRUN" == "false" ]; then
                exiftool -overwrite_original_in_place -CreateDate="${EXIF_DATETIME}" "${i}" 2>&1 >/dev/null
            fi
        fi
    fi

    # increment COUNTER on same DATETIME or reset otherwise
    if [ "$PREVIOUS_DATETIME" == "$DATETIME" ]; then
        COUNTER=$((COUNTER + 1))
    else
        PREVIOUS_DATETIME="${DATETIME}"
        COUNTER=0
    fi

    # build new filename
    NEW_FILENAME="${DATETIME}"
    if [ "${COUNTER}" -gt 0 ]; then
        NEW_FILENAME="${NEW_FILENAME} (${COUNTER})"
    fi
    EXTENSION="$(echo "${i}" | grep -o '[^.]*$')"
    NEW_FILENAME="${NEW_FILENAME}.${EXTENSION}"

    # rename file if necessary
    if [ "${i}" != "${NEW_FILENAME}" ]; then
        echo "${i}  -->  ${NEW_FILENAME}"
        if [ "$DRYRUN" == "false" ]; then
            mv "${i}" "${NEW_FILENAME}"
        fi
    else
        echo "keep  ${NEW_FILENAME}"
    fi
done


