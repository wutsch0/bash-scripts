#!/bin/bash
# Rename image files using their exif or last modification timestamp
# necessary packages:   libimage-exiftool-perl


#######################################
# Generates new filename
# Globals:
#   None
# Arguments:
#   $1 timestamp of file as string
#   $2 previous filename
# Returns:
#   $1 new filename
#######################################
generate_filename() {
  local datetime
  local old_filename
  readonly datetime="${1}"
  readonly old_filename="${2}"

  local extension
  readonly extension="$(echo "${old_filename}" | grep -o '[^.]*$')"

  local counter=0
  local new_filename="${datetime}.${extension}"
  while [[ -f "${new_filename}" ]]; do
     counter=$((counter + 1))
     new_filename="${datetime} (${counter}).${extension}"
  done

  echo "${new_filename}"
  return 0
}

#######################################
# TODO: split into more functions
#######################################
main() {
  # define default values
  local DRYRUN='false'
  local EXIFUPDATE='false'
  local PATTERN="%Y-%m-%d %H.%M.%S"
  local IMAGE_PATH

  # read script arguments
  while getopts 'dep:' flag; do
    case "${flag}" in
      e) EXIFUPDATE='true' ;;
      d) DRYRUN='true' ;;
      p) PATTERN="${OPTARG}" ;;
    esac
  done
  shift $((OPTIND - 1)) # image path is now in $1

  readonly DRYRUN
  readonly EXIFUPDATE
  readonly PATTERN

  # validate arguments
  if [[ "$#" -ne 1 ]]; then
    echo "Expecting exactly one parameter. Exiting"
    exit 1
  else
    readonly IMAGE_PATH="${1}"
  fi

  if [[ ! -d "${IMAGE_PATH}" ]]; then
    echo "Path '${IMAGE_PATH}' does not exist. Existing"
    exit 2
  fi


  if [[ "${DRYRUN}" == 'true' ]]; then
    echo ""
    echo "NOTE: This is a DRYRUN only"
    echo "---------------------------"
    echo ""
  fi


  #
  # LOOP THROUGH FILES IN PATH
  #
  cd "${IMAGE_PATH}"
  # loop through all files, use \n as separator to support whitespaces in
  # filename; order alphabetically while interpret numbers
  find . -type f -printf "%f\n" | sort -V  | while read filename; do

    # get datetime from exif data
    exif_create_date="$(exiftool -t -s -d "${PATTERN}" -CreateDate "${filename}")"
    timestamp="$(echo "${exif_create_date}" | sed -r 's/^\s*CreateDate\s*//g')"

    # if not available, get last modification time from file
    if [[ -z "${timestamp}" ]]; then
      timestamp="$(date -r "${filename}" "+${PATTERN}")"
      echo "${filename}: last modification time used"

      if [[ "${EXIFUPDATE}" == 'true' ]]; then
        exif_timestamp="$(date -r "${filename}" "+%Y-%m-%d %H:%M:%S")"
        echo "${filename}: update exif timestamp to ${exif_timestamp}"
        if [[ "${DRYRUN}" == 'false' ]]; then
          exiftool -overwrite_original_in_place \
            -CreateDate="${exif_timestamp}" "${filename}" 2>&1 >/dev/null
        fi
      fi
    fi

    # get new filename
    new_filename=$(generate_filename "${timestamp}" "${filename}")

    # rename file if necessary
    if [[ "${filename}" != "${new_filename}" ]]; then
      echo "${filename}  -->  ${new_filename}"
      if [[ "${DRYRUN}" == 'false' ]]; then
        mv "${filename}" "${new_filename}"
      fi
    else
      echo "keep  ${new_filename}"
    fi
  done
}

main "$@"